name: Build and Release
run-name: Build and Release (${{ github.event.inputs.version }})

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g. 1.2.3)'
        required: true

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ github.event.inputs.version }} already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ github.event.inputs.version }} does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if it doesn't exist
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"

      - name: Configure Git URL
        run: git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Get dependencies
        run: go mod tidy

      - name: Build for multiple platforms
        run: |
          # Use version from workflow input
          export VERSION=${{ github.event.inputs.version }}
          echo "CLI_VERSION=${VERSION}" >> $GITHUB_ENV
          export COMMIT_HASH=$(git rev-parse HEAD)
          export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ./scripts/build_all.sh

      - name: Upload to DigitalOcean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SECRET_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SECRET_KEY }}
        run: |
          aws --endpoint-url https://sfo3.digitaloceanspaces.com \
            s3 cp build/ \
            s3://devplan-cli/releases/versions/${{ env.CLI_VERSION }}/ \
            --recursive --acl public-read

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

      - name: Upload Linux amd64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-linux-amd64.tar.gz
          asset_name: devplan-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux arm64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-linux-arm64.tar.gz
          asset_name: devplan-linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS amd64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-darwin-amd64.tar.gz
          asset_name: devplan-darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS arm64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-darwin-arm64.tar.gz
          asset_name: devplan-darwin-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows amd64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-windows-amd64.zip
          asset_name: devplan-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Windows arm64 (auto-update enabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-windows-arm64.zip
          asset_name: devplan-windows-arm64.zip
          asset_content_type: application/zip

      - name: Upload Linux amd64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-linux-amd64-noautoupdate.tar.gz
          asset_name: devplan-linux-amd64-noautoupdate.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux arm64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-linux-arm64-noautoupdate.tar.gz
          asset_name: devplan-linux-arm64-noautoupdate.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS amd64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-darwin-amd64-noautoupdate.tar.gz
          asset_name: devplan-darwin-amd64-noautoupdate.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS arm64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-darwin-arm64-noautoupdate.tar.gz
          asset_name: devplan-darwin-arm64-noautoupdate.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows amd64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-windows-amd64-noautoupdate.zip
          asset_name: devplan-windows-amd64-noautoupdate.zip
          asset_content_type: application/zip

      - name: Upload Windows arm64 (auto-update disabled)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/devplan-windows-arm64-noautoupdate.zip
          asset_name: devplan-windows-arm64-noautoupdate.zip
          asset_content_type: application/zip

      - name: Validate Release Assets
        run: |
          echo "Validating that all required assets are present..."
          required_assets=(
            "devplan-linux-amd64.tar.gz"
            "devplan-linux-arm64.tar.gz"
            "devplan-darwin-amd64.tar.gz"
            "devplan-darwin-arm64.tar.gz"
            "devplan-windows-amd64.zip"
            "devplan-windows-arm64.zip"
            "devplan-linux-amd64-noautoupdate.tar.gz"
            "devplan-linux-arm64-noautoupdate.tar.gz"
            "devplan-darwin-amd64-noautoupdate.tar.gz"
            "devplan-darwin-arm64-noautoupdate.tar.gz"
            "devplan-windows-amd64-noautoupdate.zip"
            "devplan-windows-arm64-noautoupdate.zip"
          )

          missing_assets=()
          for asset in "${required_assets[@]}"; do
            if [[ ! -f "./build/${asset}" ]]; then
              missing_assets+=("${asset}")
            fi
          done

          if [[ ${#missing_assets[@]} -gt 0 ]]; then
            echo "ERROR: Missing required assets:"
            printf '%s\n' "${missing_assets[@]}"
            exit 1
          fi

          echo "All required assets are present!"

      - name: Verify Auto-Update is Disabled in No-Auto-Update Binaries
        run: |
          echo "Verifying that auto-update is disabled in no-auto-update binaries..."

          # Extract and test a few binaries to verify auto-update is disabled
          cd build

          # Test Linux amd64 no-auto-update binary
          tar -xzf devplan-linux-amd64-noautoupdate.tar.gz
          if ./devplan-linux-amd64-noautoupdate version | grep -q "Auto-update: disabled"; then
            echo "✓ Linux amd64 no-auto-update binary verified"
          else
            echo "✗ Linux amd64 no-auto-update binary failed verification"
            exit 1
          fi

          # Test macOS arm64 no-auto-update binary (if on macOS)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            tar -xzf devplan-darwin-arm64-noautoupdate.tar.gz
            if ./devplan-darwin-arm64-noautoupdate version | grep -q "Auto-update: disabled"; then
              echo "✓ macOS arm64 no-auto-update binary verified"
            else
              echo "✗ macOS arm64 no-auto-update binary failed verification"
              exit 1
            fi
          fi

          echo "Auto-update disabled verification completed!"
